// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CharacterDetailsContainer should display character details 1`] = `
<Connect(CharacterDetailsContainer)
  match={
    Object {
      "params": Object {
        "id": "1011334",
      },
    }
  }
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <CharacterDetailsContainer
    character={
      Array [
        Object {
          "id": 1011334,
        },
      ]
    }
    dispatch={[MockFunction]}
    match={
      Object {
        "params": Object {
          "id": "1011334",
        },
      }
    }
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [MockFunction],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <Component
      character={
        Array [
          Object {
            "id": 1011334,
          },
        ]
      }
    />
  </CharacterDetailsContainer>
</Connect(CharacterDetailsContainer)>
`;

exports[`CharacterDetailsContainer should display loading message while no character 1`] = `
<Connect(CharacterDetailsContainer)
  match={
    Object {
      "params": Object {},
    }
  }
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction] {
        "calls": Array [
          Array [
            undefined,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <CharacterDetailsContainer
    dispatch={
      [MockFunction] {
        "calls": Array [
          Array [
            undefined,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    isLoading={true}
    match={
      Object {
        "params": Object {},
      }
    }
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [MockFunction] {
          "calls": Array [
            Array [
              undefined,
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <p>
      Loading...
    </p>
  </CharacterDetailsContainer>
</Connect(CharacterDetailsContainer)>
`;
